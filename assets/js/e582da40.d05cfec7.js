"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[24538],{650057:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>n,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var r=i(785893),a=i(511151);const t={id:"decompose-diacritical-marks",title:"Decompose Diacritial Marks",pagination_label:"Decompose Diacritial Marks",sidebar_label:"Decompose Diacritial Marks",sidebar_class_name:"decomposeDiacriticalMarks",keywords:["transforms","operations","decompose","diacritical","marks"],description:"Clean or standardize symbols used within language.",slug:"/extensibility/transforms/operations/decompose-diacritical-marks",tags:["Transforms","Transform Operations"]},n=void 0,o={id:"extensibility/transforms/operations/decompose-diacritical-marks",title:"Decompose Diacritial Marks",description:"Clean or standardize symbols used within language.",source:"@site/docs/extensibility/transforms/operations/decompose-diacritical-marks.md",sourceDirName:"extensibility/transforms/operations",slug:"/extensibility/transforms/operations/decompose-diacritical-marks",permalink:"/docs/extensibility/transforms/operations/decompose-diacritical-marks",draft:!1,unlisted:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/extensibility/transforms/operations/decompose-diacritical-marks.md",tags:[{inline:!0,label:"Transforms",permalink:"/docs/tags/transforms"},{inline:!0,label:"Transform Operations",permalink:"/docs/tags/transform-operations"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1726169183e3,frontMatter:{id:"decompose-diacritical-marks",title:"Decompose Diacritial Marks",pagination_label:"Decompose Diacritial Marks",sidebar_label:"Decompose Diacritial Marks",sidebar_class_name:"decomposeDiacriticalMarks",keywords:["transforms","operations","decompose","diacritical","marks"],description:"Clean or standardize symbols used within language.",slug:"/extensibility/transforms/operations/decompose-diacritical-marks",tags:["Transforms","Transform Operations"]},sidebar:"openApiSidebar",previous:{title:"Date Math",permalink:"/docs/extensibility/transforms/operations/date-math"},next:{title:"Display Name",permalink:"/docs/extensibility/transforms/operations/display-name"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Transform Structure",id:"transform-structure",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Examples",id:"examples",level:2},{value:"Testing",id:"testing",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.p,{children:"Use the decompose diacritical marks transform to clean or standardize symbols used within language to inform the reader how to say or pronounce a letter. These symbols are often incompatible with downstream applications and must be standardized to another character set such as ASCII."}),"\n",(0,r.jsx)(s.p,{children:"The following are examples of diacritical marks:"}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"\u0100"}),"\n",(0,r.jsx)(s.li,{children:"\u0108"}),"\n",(0,r.jsx)(s.li,{children:"\u0147"}),"\n",(0,r.jsx)(s.li,{children:"\u0174"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The decomposeDiacriticalMarks transform uses the ",(0,r.jsx)(s.a,{href:"https://docs.oracle.com/javase/7/docs/api/java/text/Normalizer.html",children:"Normalizer library"})," to decompose the diacritical marks. It specifically uses the Normalization Form KD (NFKD), as described in Sections 3.6, 3.10, and 3.11 of the Unicode Standard, also summarized under ",(0,r.jsx)(s.a,{href:"https://www.unicode.org/reports/tr15/tr15-23.html#Decomposition",children:"Annex 4: Decomposition"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["After decomposition, the transform uses a ",(0,r.jsx)(s.a,{href:"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html",children:"Regex Replace"})," to replace all diacritical marks by using the ",(0,r.jsx)(s.code,{children:"InCombiningDiacriticalMarks"})," property of Unicode (ex. ",(0,r.jsx)(s.code,{children:'replaceAll("[\\\\p{InCombiningDiacriticalMarks}]", "")'}),")."]}),"\n",(0,r.jsx)(s.h2,{id:"transform-structure",children:"Transform Structure"}),"\n",(0,r.jsxs)(s.p,{children:["The transform for decompose diacritical marks requires only the transform's ",(0,r.jsx)(s.code,{children:"type"})," and ",(0,r.jsx)(s.code,{children:"name"})," attributes:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "type": "decomposeDiacriticalMarks",\n  "name": "Decompose Diacritical Marks Transform"\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"attributes",children:"Attributes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Required Attributes"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"type"})," - This must always be set to ",(0,r.jsx)(s.code,{children:"decomposeDiacriticalMarks"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"name"})," - This is a required attribute for all transforms. It represents the name of the transform as it will appear in the UI's dropdown menus."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Optional Attributes"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"requiresPeriodicRefresh"})," - This ",(0,r.jsx)(s.code,{children:"true"})," or ",(0,r.jsx)(s.code,{children:"false"})," value indicates whether the transform logic should be reevaluated every evening as part of the identity refresh process."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"input"})," - This is an optional attribute that can explicitly define the input data passed into the transform logic. If no input is provided, the transform takes its input from the source and attribute combination configured with the UI."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'Input: "\u0100ric"\nOutput: "Aric"\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Transform Request Body"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "type": "decomposeDiacriticalMarks",\n  "name": "Test Decompose Diacritical Marks Transform"\n}\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsx)(s.p,{children:'This transform takes the user\'s "LastName" attribute from the "HR Source" and replaces any diacritical marks with ASCII-compatible values.'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'Input: "Dub\xe7ek"\nOutput: "Dubcek"\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Transform Request Body"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "attributes": {\n    "input": {\n      "attributes": {\n        "sourceName": "HR Source",\n        "attributeName": "LastName"\n      },\n      "type": "accountAttribute"\n    }\n  },\n  "type": "decomposeDiacriticalMarks",\n  "name": "Decompose Diacritical Marks Transform"\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(s.p,{children:"To run some tests in code, use this java code to compare the results of what the transform does to what your code does:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'import java.text.Normalizer;\nimport java.util.regex.Pattern;\n\n// Decomposes characters from their diacritical marks\ninput = Normalizer.normalize(input, Normalizer.Form.NFKD);\n\n// Removes the marks\ninput = input.replaceAll("[\\\\p{InCombiningDiacriticalMarks}]", "");\n'})})]})}function m(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);